{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"No Man's Sky (unofficial) Development Kit (NMSDK) NMSDK is a plugin for blender which can be used to convert models to a format compatible with No Man's Sky. It is also able to generate action trigger sequences for custom interactions and events in the game, as well as give the custom models specific properties such as being able to be interactable, able to be flown as a ship, etc. To get started developing with NMSDK, download the plugin here . You can see what is in the latest versions here","title":"Home"},{"location":"#no-mans-sky-unofficial-development-kit-nmsdk","text":"NMSDK is a plugin for blender which can be used to convert models to a format compatible with No Man's Sky. It is also able to generate action trigger sequences for custom interactions and events in the game, as well as give the custom models specific properties such as being able to be interactable, able to be flown as a ship, etc. To get started developing with NMSDK, download the plugin here . You can see what is in the latest versions here","title":"No Man's Sky (unofficial) Development Kit (NMSDK)"},{"location":"api/","text":"API guide Due to how Blender handles adding and registering functions that can be publically used, all public API functions are located within the bpy.ops.nmsdk namespace. All operators MUST also be called with keyword arguments (see examples) Exporting data from Blender bpy.ops.nmsdk.export_scene(**parameters) Export the entire current blender file. Parameters : output_directory : string The full path of the directory the data is to be exported to. All subsequent folders will reside within this one. export_directory : string The name of the path you want the data to be relative to the PCBANKS folder within the games' files. Default : 'CUSTOMMODELS' . group_name : string Name of the sub-folder which the scene will be placed in. This can be used to group multiple exports all into the same folder. Default : scene_name . scene_name : string Name of the scene being exported. Many files will use this as the main component of their filename. Default : The name of the scene object (Ie. the object in the scene that is an empty reference node). AT_only : boolean Whether or not to export just the action triggers in the scene. Default : False . no_vert_colours : boolean Whether or not the vertex colours should be exported. Generally models won't have vertex colouring unless you add it manually. Default : False . idle_anim : string The name of the idle animation. If the scene contains no animations then this is not needed. If the scene is animated however this MUST be provided. Default : '' . Notes : This calls the same function as is used when operating NMSDK visually with blender, but with a slightly different call signature to allow exactness. As this call is a blender operator, the scene itself must be loaded by an instance of blender. Example : # First, you need to have to have loaded the blender file with blender # Let's say we have blender file with a scene node in it called 'NEWMODEL' # In blender, you can then call the operator as follows: bpy.ops.nmsdk.export_scene(output_directory='C:\\\\OUTPUT_PATH', export_directory='CUSTOMMODELS', group_name='TESTMODEL') # In this example the files will be produced in the directory # C:\\OUTPUT_PATH\\CUSTOMMODELS\\TESTMODEL\\ # with files such as 'NEWMODEL.SCENE.MBIN', etc. # If we want to be extra-specific, or overwrite the name in the blender file we can: bpy.ops.nmsdk.export_scene(output_directory='C:\\\\OUTPUT_PATH', export_directory='CUSTOMMODELS', group_name='TESTMODEL', scene_name='SOMETHINGELSE') # Where we will now get the files output in the same folder as before, but as a scene called 'SOMETHINGELSE.SCENE.MBIN', etc Importing data into Blender bpy.ops.nmsdk.import_scene(path) Import a complete NMS scene into blender. Parameters : path : string The complete file path to a SCENE.MBIN or SCENE.EXML file to be loaded into blender. Notes : The entire scene will be loaded into the active scene in blender. Example : bpy.ops.nmsdk.import_scene(path='C:\\\\NMS-1.77\\\\MODELS\\\\PLANETS\\\\BIOMES\\\\COMMON\\\\CRYSTALS\\\\LARGE\\\\CRYSTAL_LARGE.SCENE.MBIN') bpy.ops.nmsdk.import_mesh(path, mesh_id) Import part of a scene specified by the id of a mesh node in the scene file. Parameters : path : string The complete file path to a SCENE.MBIN or SCENE.EXML file to be loaded into blender. mesh_id : string The Name of the TkSceneNodeData in the Scene being loaded. Notes : Only this object will be loaded. None of the children will be. Example : bpy.ops.nmsdk.import_mesh(path='C:\\\\NMS-1.77\\\\MODELS\\\\PLANETS\\\\BIOMES\\\\COMMON\\\\CRYSTALS\\\\LARGE\\\\CRYSTAL_LARGE.SCENE.MBIN', mesh_id='_CRYSTAL_A')","title":"API guide"},{"location":"api/#api-guide","text":"Due to how Blender handles adding and registering functions that can be publically used, all public API functions are located within the bpy.ops.nmsdk namespace. All operators MUST also be called with keyword arguments (see examples)","title":"API guide"},{"location":"api/#exporting-data-from-blender","text":"","title":"Exporting data from Blender"},{"location":"api/#bpyopsnmsdkexport_sceneparameters","text":"Export the entire current blender file. Parameters : output_directory : string The full path of the directory the data is to be exported to. All subsequent folders will reside within this one. export_directory : string The name of the path you want the data to be relative to the PCBANKS folder within the games' files. Default : 'CUSTOMMODELS' . group_name : string Name of the sub-folder which the scene will be placed in. This can be used to group multiple exports all into the same folder. Default : scene_name . scene_name : string Name of the scene being exported. Many files will use this as the main component of their filename. Default : The name of the scene object (Ie. the object in the scene that is an empty reference node). AT_only : boolean Whether or not to export just the action triggers in the scene. Default : False . no_vert_colours : boolean Whether or not the vertex colours should be exported. Generally models won't have vertex colouring unless you add it manually. Default : False . idle_anim : string The name of the idle animation. If the scene contains no animations then this is not needed. If the scene is animated however this MUST be provided. Default : '' . Notes : This calls the same function as is used when operating NMSDK visually with blender, but with a slightly different call signature to allow exactness. As this call is a blender operator, the scene itself must be loaded by an instance of blender. Example : # First, you need to have to have loaded the blender file with blender # Let's say we have blender file with a scene node in it called 'NEWMODEL' # In blender, you can then call the operator as follows: bpy.ops.nmsdk.export_scene(output_directory='C:\\\\OUTPUT_PATH', export_directory='CUSTOMMODELS', group_name='TESTMODEL') # In this example the files will be produced in the directory # C:\\OUTPUT_PATH\\CUSTOMMODELS\\TESTMODEL\\ # with files such as 'NEWMODEL.SCENE.MBIN', etc. # If we want to be extra-specific, or overwrite the name in the blender file we can: bpy.ops.nmsdk.export_scene(output_directory='C:\\\\OUTPUT_PATH', export_directory='CUSTOMMODELS', group_name='TESTMODEL', scene_name='SOMETHINGELSE') # Where we will now get the files output in the same folder as before, but as a scene called 'SOMETHINGELSE.SCENE.MBIN', etc","title":"bpy.ops.nmsdk.export_scene(**parameters)"},{"location":"api/#importing-data-into-blender","text":"","title":"Importing data into Blender"},{"location":"api/#bpyopsnmsdkimport_scenepath","text":"Import a complete NMS scene into blender. Parameters : path : string The complete file path to a SCENE.MBIN or SCENE.EXML file to be loaded into blender. Notes : The entire scene will be loaded into the active scene in blender. Example : bpy.ops.nmsdk.import_scene(path='C:\\\\NMS-1.77\\\\MODELS\\\\PLANETS\\\\BIOMES\\\\COMMON\\\\CRYSTALS\\\\LARGE\\\\CRYSTAL_LARGE.SCENE.MBIN')","title":"bpy.ops.nmsdk.import_scene(path)"},{"location":"api/#bpyopsnmsdkimport_meshpath-mesh_id","text":"Import part of a scene specified by the id of a mesh node in the scene file. Parameters : path : string The complete file path to a SCENE.MBIN or SCENE.EXML file to be loaded into blender. mesh_id : string The Name of the TkSceneNodeData in the Scene being loaded. Notes : Only this object will be loaded. None of the children will be. Example : bpy.ops.nmsdk.import_mesh(path='C:\\\\NMS-1.77\\\\MODELS\\\\PLANETS\\\\BIOMES\\\\COMMON\\\\CRYSTALS\\\\LARGE\\\\CRYSTAL_LARGE.SCENE.MBIN', mesh_id='_CRYSTAL_A')","title":"bpy.ops.nmsdk.import_mesh(path, mesh_id)"},{"location":"change_log/","text":"NMSDK Changelog Releases: Current - v0.9.15 Mostly internal updates. Made some changes to the internal API and added a new public function for exporting models via the command line. More information can be found on the API guide page. Past: v0.9.14 (10/08/2019) The animation exporting system has received a major overhaul. It is now far mor easy for each part to have mutliple animations. The Idle animation can now be set from the Animation controls section of the NMSDK toolbar. Any animation that isn't specified as the idle one v0.9.13 (02/08/2019) Import process has been expanded to allow for animations to be imported. This includes both simple animations (one with just translation/rotation/scaling of nodes in the scene), as well as complex animations which involve skinned meshes and bones. Currently complex animations are still a bit broken, but hopefully they will be fixed in the future. To see more details on what options are available for imported animations, see here . Tests have been added to NMSDK! This has no affect on the plugin itself, however if you clone the repo from github you will now notice a number of files from the game which are used to test the importing capabilities of NMSDK. This will be extended greatly in the future, but for now there is only the framework and a few simple tests. v0.9.12 (03/06/2019): Add support for importing Box , Cylinder and Sphere type primitive collisions. On import there is an option to allow for displaying the collisions which is false by default. Display of collisions can be toggled by the button in the NMSDK side panel. When importing models, importing collisions can be turned off so that no collision meshes appear in the scene. Default values can be set for the export path and group name export properties in the NMSDK settings panel. These will persists across multiple sessions to make exporting multiple models in the same set easier. v0.9.11 (25/05/2019): This version (FINALLY!) implements the exporting of mesh type collisions. To allow this the Mesh type has been re-enabled in the Collision node panel. Currently if you wish to export a mesh type collision, you need to apply the scale and rotation transforms to the mesh, otherwise your exported data will not have these values. v0.9.10 (24/05/2019): This version fixes a number of issues introduced in v0.9.9 when attempting to fix imports. Exports should now be far more stable. v0.9.9 (23/05/2019): Vertex colour is now able to be exported. To add vertex colour to a model change the mode in blender to \"Vertex Paint\". Nested referenced scenes can also be exported. This gives complete flexibility to the way a scene is to be exported.","title":"Change log"},{"location":"change_log/#nmsdk-changelog","text":"","title":"NMSDK Changelog"},{"location":"change_log/#releases","text":"","title":"Releases:"},{"location":"change_log/#current-v0915","text":"Mostly internal updates. Made some changes to the internal API and added a new public function for exporting models via the command line. More information can be found on the API guide page.","title":"Current - v0.9.15"},{"location":"change_log/#past","text":"","title":"Past:"},{"location":"change_log/#v0914-10082019","text":"The animation exporting system has received a major overhaul. It is now far mor easy for each part to have mutliple animations. The Idle animation can now be set from the Animation controls section of the NMSDK toolbar. Any animation that isn't specified as the idle one","title":"v0.9.14 (10/08/2019)"},{"location":"change_log/#v0913-02082019","text":"Import process has been expanded to allow for animations to be imported. This includes both simple animations (one with just translation/rotation/scaling of nodes in the scene), as well as complex animations which involve skinned meshes and bones. Currently complex animations are still a bit broken, but hopefully they will be fixed in the future. To see more details on what options are available for imported animations, see here . Tests have been added to NMSDK! This has no affect on the plugin itself, however if you clone the repo from github you will now notice a number of files from the game which are used to test the importing capabilities of NMSDK. This will be extended greatly in the future, but for now there is only the framework and a few simple tests.","title":"v0.9.13 (02/08/2019)"},{"location":"change_log/#v0912-03062019","text":"Add support for importing Box , Cylinder and Sphere type primitive collisions. On import there is an option to allow for displaying the collisions which is false by default. Display of collisions can be toggled by the button in the NMSDK side panel. When importing models, importing collisions can be turned off so that no collision meshes appear in the scene. Default values can be set for the export path and group name export properties in the NMSDK settings panel. These will persists across multiple sessions to make exporting multiple models in the same set easier.","title":"v0.9.12 (03/06/2019):"},{"location":"change_log/#v0911-25052019","text":"This version (FINALLY!) implements the exporting of mesh type collisions. To allow this the Mesh type has been re-enabled in the Collision node panel. Currently if you wish to export a mesh type collision, you need to apply the scale and rotation transforms to the mesh, otherwise your exported data will not have these values.","title":"v0.9.11 (25/05/2019):"},{"location":"change_log/#v0910-24052019","text":"This version fixes a number of issues introduced in v0.9.9 when attempting to fix imports. Exports should now be far more stable.","title":"v0.9.10 (24/05/2019):"},{"location":"change_log/#v099-23052019","text":"Vertex colour is now able to be exported. To add vertex colour to a model change the mode in blender to \"Vertex Paint\". Nested referenced scenes can also be exported. This gives complete flexibility to the way a scene is to be exported.","title":"v0.9.9 (23/05/2019):"},{"location":"settings/","text":"NMSDK Settings Panel As part of the NMSDK plugin for blender, as settings panel available on the left-hand side of the screen is available in Object Mode. This panel provides a number of functions which are useful in the import and export processes. Update Tools: This section provides a button which, when pressed, will update an older format exportable scene to the newest format. This simply renames the main scene and makes a few other little changes that are easy enough to do yourself, but this button will make it easier! Scene Tools: This section provides tool which can be used to modify the current scene. Currently the options are: Collision visibility. This button toggles the visibility of collisions in the scene. This is useful for scenes with many collisions where you want to hide all of them to see the model more clearly. Default values: A number of default values can be set. These are written to a .json file so that they are persistent across session. These values are used for the export process and can be set manually there too, but if you are going to be exporting multiple files all in a separate group, it is useful to set the default value here to save yoruself time later. The current default values that can be set are: Export Directory: This is the directory that would be relative to the PCBANKS folder in the games' files where the model is to be exported to. Group name: This is the name of the subfolder of the Export Directory where the scene and all other files will be written to. If this is empty it will default to the name of the scene. The above two settings mean that your exported filepath will be <Export Directory>/<Group Name> . Animation controls: This section provides a number of controls relating to animation playback and loading. For models with less than 10 animations, all the animations will be loaded automatically unless the \"Load all animations\" import setting is unchecked. When a model with animations is loaded the list of available animations to play will be displayed in a drop-down menu, with convenient 'Play', 'Pause' and 'Stop' buttons. For models with extra animations to be loaded. A further drop-down menu is displayed which lists all the possible animations the scene contains and gives the option to load them one-by-one. NMSDK has this behaviour due to the fact that for scene with large numbers of nodes and animations, it takes prohibitively long to import all the animations (not to mention the blend file will get very large!). For models that are to be exported, this panel is useful for playing all the actions that are part of a single animation all at once, as well as being able to set the idle animation.","title":"NMSDK Settings Panel"},{"location":"settings/#nmsdk-settings-panel","text":"As part of the NMSDK plugin for blender, as settings panel available on the left-hand side of the screen is available in Object Mode. This panel provides a number of functions which are useful in the import and export processes.","title":"NMSDK Settings Panel"},{"location":"settings/#update-tools","text":"This section provides a button which, when pressed, will update an older format exportable scene to the newest format. This simply renames the main scene and makes a few other little changes that are easy enough to do yourself, but this button will make it easier!","title":"Update Tools:"},{"location":"settings/#scene-tools","text":"This section provides tool which can be used to modify the current scene. Currently the options are: Collision visibility. This button toggles the visibility of collisions in the scene. This is useful for scenes with many collisions where you want to hide all of them to see the model more clearly.","title":"Scene Tools:"},{"location":"settings/#default-values","text":"A number of default values can be set. These are written to a .json file so that they are persistent across session. These values are used for the export process and can be set manually there too, but if you are going to be exporting multiple files all in a separate group, it is useful to set the default value here to save yoruself time later. The current default values that can be set are: Export Directory: This is the directory that would be relative to the PCBANKS folder in the games' files where the model is to be exported to. Group name: This is the name of the subfolder of the Export Directory where the scene and all other files will be written to. If this is empty it will default to the name of the scene. The above two settings mean that your exported filepath will be <Export Directory>/<Group Name> .","title":"Default values:"},{"location":"settings/#animation-controls","text":"This section provides a number of controls relating to animation playback and loading. For models with less than 10 animations, all the animations will be loaded automatically unless the \"Load all animations\" import setting is unchecked. When a model with animations is loaded the list of available animations to play will be displayed in a drop-down menu, with convenient 'Play', 'Pause' and 'Stop' buttons. For models with extra animations to be loaded. A further drop-down menu is displayed which lists all the possible animations the scene contains and gives the option to load them one-by-one. NMSDK has this behaviour due to the fact that for scene with large numbers of nodes and animations, it takes prohibitively long to import all the animations (not to mention the blend file will get very large!). For models that are to be exported, this panel is useful for playing all the actions that are part of a single animation all at once, as well as being able to set the idle animation.","title":"Animation controls:"},{"location":"setup/","text":"Installing NMSDK Installing NMSDK is very easy. Head to the NMSDK Release page on GitHub and download the most recently released version. Open Blender and open the user settings (Ctrl + Alt + U) (or File > User Preferences... ), and select Install Add-on from File... (it is at the bottom left of the window). Select the .zip file you just downloaded and blender should install it without any errors. To make exporting easier, NMSDK will automatically convert all produced .exml files to .mbin files. For this to work, MBINCompiler is required. See below for instructions on downloading and installing the latest version. Prerequisites Blender NMSDK requires a version of blender greater than or equal to 2.79. This is due to the model importer component to need a shader node that only exists with Blender 2.79 and above. NMSDK has not been tested for blender 2.80, however it is likely to not work, and support for 2.80 will not come until 2.80 is out of beta and is the latest official release. MBINCompiler For NMSDK to work, it requires MBINCompiler to generate the .mbin files that are read by the game. The easiest way to have MBINCompiler set up is to download the most recent release and register MBINCompiler to the path so that it can be picked up anywhere by Blender. If you already have a version of MBINCompiler on your computer, ensure it is version v1.78.0-pre1 or above. This can be found on the MBINCompiler releases page. For NMSDK to be able to use MBINCompiler , the program needs to be registered to the path so that it can be called from anywhere on your computer. Open the folder containing the MBINCompiler.exe you just downloaded, open this folder in command line, then enter MBINCompiler.exe register . This will add the folder the .exe is in to the system path, allowing NMSDK to be able to access the program from anywhere.","title":"Setup"},{"location":"setup/#installing-nmsdk","text":"Installing NMSDK is very easy. Head to the NMSDK Release page on GitHub and download the most recently released version. Open Blender and open the user settings (Ctrl + Alt + U) (or File > User Preferences... ), and select Install Add-on from File... (it is at the bottom left of the window). Select the .zip file you just downloaded and blender should install it without any errors. To make exporting easier, NMSDK will automatically convert all produced .exml files to .mbin files. For this to work, MBINCompiler is required. See below for instructions on downloading and installing the latest version.","title":"Installing NMSDK"},{"location":"setup/#prerequisites","text":"","title":"Prerequisites"},{"location":"setup/#blender","text":"NMSDK requires a version of blender greater than or equal to 2.79. This is due to the model importer component to need a shader node that only exists with Blender 2.79 and above. NMSDK has not been tested for blender 2.80, however it is likely to not work, and support for 2.80 will not come until 2.80 is out of beta and is the latest official release.","title":"Blender"},{"location":"setup/#mbincompiler","text":"For NMSDK to work, it requires MBINCompiler to generate the .mbin files that are read by the game. The easiest way to have MBINCompiler set up is to download the most recent release and register MBINCompiler to the path so that it can be picked up anywhere by Blender. If you already have a version of MBINCompiler on your computer, ensure it is version v1.78.0-pre1 or above. This can be found on the MBINCompiler releases page. For NMSDK to be able to use MBINCompiler , the program needs to be registered to the path so that it can be called from anywhere on your computer. Open the folder containing the MBINCompiler.exe you just downloaded, open this folder in command line, then enter MBINCompiler.exe register . This will add the folder the .exe is in to the system path, allowing NMSDK to be able to access the program from anywhere.","title":"MBINCompiler"},{"location":"exporting/action_triggers/","text":"Adding Action Triggers Coming soon!","title":"Creating Action Triggers"},{"location":"exporting/action_triggers/#adding-action-triggers","text":"Coming soon!","title":"Adding Action Triggers"},{"location":"exporting/animations/","text":"Exporting animated scenes NMSDK is able to handle scene with animations, allowing your creations to be more than just static objects, but beautiful animated constructions! Adding animations In blender, animations are known as actions . Each action contains the information about the rotation, translation and scale of the object on any given frame. You may specify this data by generating f-curves, or by simply inserting keyframes with the object in specific locations. To add an action open the \"Dope sheet\" view and set the mode as \"Action Editor\". In this view you can add new actions. To allow for maximum flexibility of animations in regards to exporting, it is very importantant that actions are named in a specific way. ALL actions that are to be exported with NMSDK MUST have the format <action_name>.<object name> . So for example, if you want to have an animation in the scene called WALK , and two objects called LEFT_LEG and RIGHT_LEG , you would create actions called WALK.LEFT_LEG and WALK.RIGHT_LEG respectively. It is very important if you have multiple animations per object that you give each action a fake user (Press the \"F\" button next to the name of the action in the list). This way the data block is saved. It is also recommended that each action is stashed so that it is is stored in the NLA tracks for the object. This shouldn't affect the resulting animations, however it keeps the actions stored nicely in the NLA tracks. Chosing an animation handler For the game to know the details of the animation(s) you added, an attached entity file MUST be specified as an entity controller. It is important to note that only one associated entity file may be specified as an animation controller in each scene at a time. Specifying more that one will not raise an error, but instead, only the first will be used, and any others will be ignored. Specifying the idle animation NMS has two types of animations; Idle animations, and Anim animations. The Idle animation doesn't require any action triggers to be called and will play while the scene is spawned (depending on the animation settings). The Anim animations however are only run when an action trigger causes them to be. It is only possible to have one Idle animation but you can have as many Anim animations as you like. To specify which animation is the idle animation, you simply select it from the drop down box in the Animation Controls section of the NMSDK toolbar. If you do not see your animation listed, make sure you click the refresh button as it isn't possible to have the list updated automatically whenever you add a new animation.","title":"Adding Animations"},{"location":"exporting/animations/#exporting-animated-scenes","text":"NMSDK is able to handle scene with animations, allowing your creations to be more than just static objects, but beautiful animated constructions!","title":"Exporting animated scenes"},{"location":"exporting/animations/#adding-animations","text":"In blender, animations are known as actions . Each action contains the information about the rotation, translation and scale of the object on any given frame. You may specify this data by generating f-curves, or by simply inserting keyframes with the object in specific locations. To add an action open the \"Dope sheet\" view and set the mode as \"Action Editor\". In this view you can add new actions. To allow for maximum flexibility of animations in regards to exporting, it is very importantant that actions are named in a specific way. ALL actions that are to be exported with NMSDK MUST have the format <action_name>.<object name> . So for example, if you want to have an animation in the scene called WALK , and two objects called LEFT_LEG and RIGHT_LEG , you would create actions called WALK.LEFT_LEG and WALK.RIGHT_LEG respectively. It is very important if you have multiple animations per object that you give each action a fake user (Press the \"F\" button next to the name of the action in the list). This way the data block is saved. It is also recommended that each action is stashed so that it is is stored in the NLA tracks for the object. This shouldn't affect the resulting animations, however it keeps the actions stored nicely in the NLA tracks.","title":"Adding animations"},{"location":"exporting/animations/#chosing-an-animation-handler","text":"For the game to know the details of the animation(s) you added, an attached entity file MUST be specified as an entity controller. It is important to note that only one associated entity file may be specified as an animation controller in each scene at a time. Specifying more that one will not raise an error, but instead, only the first will be used, and any others will be ignored.","title":"Chosing an animation handler"},{"location":"exporting/animations/#specifying-the-idle-animation","text":"NMS has two types of animations; Idle animations, and Anim animations. The Idle animation doesn't require any action triggers to be called and will play while the scene is spawned (depending on the animation settings). The Anim animations however are only run when an action trigger causes them to be. It is only possible to have one Idle animation but you can have as many Anim animations as you like. To specify which animation is the idle animation, you simply select it from the drop down box in the Animation Controls section of the NMSDK toolbar. If you do not see your animation listed, make sure you click the refresh button as it isn't possible to have the list updated automatically whenever you add a new animation.","title":"Specifying the idle animation"},{"location":"exporting/entities/","text":"Adding entities Coming soon!","title":"Adding Entities"},{"location":"exporting/entities/#adding-entities","text":"Coming soon!","title":"Adding entities"},{"location":"exporting/exporting/","text":"Exporting a Blender scene into a NMS compatible format NMSDK's primary functionality is to convert scenes created in Blender into a format that NMS can load and display in the game. This can be anything from extra rocks or plants, to custom buildings that are scattered around on planets, new parts to be added to your base, or even new ships or freighters that can be flown or part of your fleet! To provide this functionality a new panel has been added to the blender user interface (UI) to allow the user to enter any relevant information required to export a model to the format compatible with NMS. Important info before you start If you are importing an .obj file into Blender to be exported with NMSDK, ensure that the vertex split mode is set to Keep Vert Order (see below). If this is not done then you will need to manually triangulate the mesh before exporting. Updating from old-format scenes Previously all objects that were to be exported had to be a child of a node called NMS_SCENE . This requirement has been removed in the current version of NSMDK, as well as the requirement for an object to have NMS_ at the beginning of its name. Old format scenes in blender can be updated to the new format by simply pressing the Change NMS Node type button in the NMSDK side panel: Setting up NMSDK uses a consistent node setup for both imported and exported scenes to allow the import > modify > export workflow to be as seamless as possible. Because of this, the Reference node type is given a special place. Putting it simply, the Reference node type is used to denote a scene that is to be exported. Reference nodes can either be at the top level of a scene (to indicate that you have multiple scenes to be exported that are potentially unrelated to each other), or nested within a scene (to indicate that the sub-scene may be referenced by other scenes). To allow for flexibility, Reference nodes can be given two important properties, Reference path and Scene name . Reference path is used to specify the path to an external scene file (relative to the PCBANKS folder). Scene name is used to specify the name of the exported sub-scene. This is the name of the scene that any child objects will be exported in. To illustrate how the parameters work consider the following two images. In the first image we can see that the object is a reference to a scene that already exists in the NMS game files. In this case the scene will simply contain a REFERENCE node with the SCENEGRAPH property being the path to the specified scene. In the second image we can see that the object has no reference path, but instead has a Scene name . When the blender scene is exported, there will be two scenes exported. The main scene (with NMS_SCENE being the top-most reference object), and the ref_mount object which will export to a scene file named CONSTRUCTMOUNT.SCENE.MBIN . The main scene will contain a REFERENCE node with the SCENEGRAPH property being the file path (again, relative to the PCBANKS folder) for this scene. Once you have set at least one primary object that is to be the Reference node, you can specify any subsequent objects to be a Mesh , Locator , Reference , Light , Joint or Collision node. These each have their own various uses and if you are familiar with NMS scenes it will be easy to specify what each object in a blender scene is. Tips For a detailed guide on the different node types, see the node docs . There are a few tips that should be kept in mind generally: Only objects that are the children of a Reference node will be exported. Mesh collisions should be used sparingly. They take up more computational power and may cause your model to slow down the game. If you must use mesh collisions be sure to use very low poly models (in the 100's of verts, max). It is preferrential to use primitive type collision objects when possible. When exporting an object it may be exported with edges and faces messed up. This happens when the mesh is improperly triangulated. Whilst NMSDK should triangulate a mesh properly it sometimes doesn't work as well as it should. You can see the issue in the following two images (c/o Krem): As we can see, the orange region doesn't look the same in the model viewer as it does in blender before export. To fix the issue, we can select the mesh in blender, change to EDIT mode, then select Mesh > Faces > Triangulate Faces (see image below) On re-export the issue should be fixed.","title":"Setting up"},{"location":"exporting/exporting/#exporting-a-blender-scene-into-a-nms-compatible-format","text":"NMSDK's primary functionality is to convert scenes created in Blender into a format that NMS can load and display in the game. This can be anything from extra rocks or plants, to custom buildings that are scattered around on planets, new parts to be added to your base, or even new ships or freighters that can be flown or part of your fleet! To provide this functionality a new panel has been added to the blender user interface (UI) to allow the user to enter any relevant information required to export a model to the format compatible with NMS.","title":"Exporting a Blender scene into a NMS compatible format"},{"location":"exporting/exporting/#important-info-before-you-start","text":"If you are importing an .obj file into Blender to be exported with NMSDK, ensure that the vertex split mode is set to Keep Vert Order (see below). If this is not done then you will need to manually triangulate the mesh before exporting.","title":"Important info before you start"},{"location":"exporting/exporting/#updating-from-old-format-scenes","text":"Previously all objects that were to be exported had to be a child of a node called NMS_SCENE . This requirement has been removed in the current version of NSMDK, as well as the requirement for an object to have NMS_ at the beginning of its name. Old format scenes in blender can be updated to the new format by simply pressing the Change NMS Node type button in the NMSDK side panel:","title":"Updating from old-format scenes"},{"location":"exporting/exporting/#setting-up","text":"NMSDK uses a consistent node setup for both imported and exported scenes to allow the import > modify > export workflow to be as seamless as possible. Because of this, the Reference node type is given a special place. Putting it simply, the Reference node type is used to denote a scene that is to be exported. Reference nodes can either be at the top level of a scene (to indicate that you have multiple scenes to be exported that are potentially unrelated to each other), or nested within a scene (to indicate that the sub-scene may be referenced by other scenes). To allow for flexibility, Reference nodes can be given two important properties, Reference path and Scene name . Reference path is used to specify the path to an external scene file (relative to the PCBANKS folder). Scene name is used to specify the name of the exported sub-scene. This is the name of the scene that any child objects will be exported in. To illustrate how the parameters work consider the following two images. In the first image we can see that the object is a reference to a scene that already exists in the NMS game files. In this case the scene will simply contain a REFERENCE node with the SCENEGRAPH property being the path to the specified scene. In the second image we can see that the object has no reference path, but instead has a Scene name . When the blender scene is exported, there will be two scenes exported. The main scene (with NMS_SCENE being the top-most reference object), and the ref_mount object which will export to a scene file named CONSTRUCTMOUNT.SCENE.MBIN . The main scene will contain a REFERENCE node with the SCENEGRAPH property being the file path (again, relative to the PCBANKS folder) for this scene. Once you have set at least one primary object that is to be the Reference node, you can specify any subsequent objects to be a Mesh , Locator , Reference , Light , Joint or Collision node. These each have their own various uses and if you are familiar with NMS scenes it will be easy to specify what each object in a blender scene is.","title":"Setting up"},{"location":"exporting/exporting/#tips","text":"For a detailed guide on the different node types, see the node docs . There are a few tips that should be kept in mind generally: Only objects that are the children of a Reference node will be exported. Mesh collisions should be used sparingly. They take up more computational power and may cause your model to slow down the game. If you must use mesh collisions be sure to use very low poly models (in the 100's of verts, max). It is preferrential to use primitive type collision objects when possible. When exporting an object it may be exported with edges and faces messed up. This happens when the mesh is improperly triangulated. Whilst NMSDK should triangulate a mesh properly it sometimes doesn't work as well as it should. You can see the issue in the following two images (c/o Krem): As we can see, the orange region doesn't look the same in the model viewer as it does in blender before export. To fix the issue, we can select the mesh in blender, change to EDIT mode, then select Mesh > Faces > Triangulate Faces (see image below) On re-export the issue should be fixed.","title":"Tips"},{"location":"exporting/node_docs/","text":"Node Properties Each node type has various properties that can be set. These are documented below. Mesh Node The Mesh node is only type of node that is used for mesh data that you want to be exported into a geometry file. Requires Entity : bool Indicates whether or not the specified mesh object has an associated entity. Selecting this will add an entity panel (see the page on adding entities for more details.) Material : str The path to a material file if the mesh object does not have a custom material within blender. If you are using vanilla materials or a material you have already created/exported, then you can speed up the export process by simply setting this value to the path of the material file. Locator Node A Locator node is used to create something at a particular point in space. Whether it me a place to group objects, or a location at which an interaction will occur at. It is highly recommended that you use a Locator type node to handle interactions, instead of using entity files attached to a mesh node. This allows for more precise localisation of the interaction, as well as being able to safely and easily decouple the interaction location from any animated meshes. Not doing so can cause the camera to move wildly during an interaction. Requires Entity : bool Indicates whether or not the specified mesh object has an associated entity. Selecting this will add an entity panel (see the page on adding entities for more details.) Reference Node A Reference node is used to indicate that another scene is included by reference in the parent scene. This may sometimes happen multiple times in a scene in a nested fashion. Reference Path : str The path to the scene that is referenced within the parent scene at the specified location. This value can be set to nest vanilla scenes or already exported scenes within you current scene without having to export them again. Scene Name : str For a scene that is to be exported separately, but kept in the original scene as a reference, this is the base name of the scene file. So for example if you want a scene to be exported with the file name TESTCUBE.SCENE.MBIN , you would specify this to be testcube . The case of the value doesn't matter as it is always changed to uppercase in the export process. Is a proc-gen scene? : bool Used to indicate whether or not the scene being exported requires a descriptor to be produced, causing it be procedurally generated. For more info on how this works see here . Descriptor Node Proc type : enum - Choice of Always (Default) or Random Whether or not the specified object is to always be rendered (pending rendering state of its parent), or whether it should be randomly chosen from a group containing all other objects with the same prefix at the same level. Proc prefix : str The prefix used to group all objects that are to be randomly selected. For example, If you have 5 sibling all objects that you wish to be selected from, you would set this value to be the same for all of them. Note that NMSDK will construct the objects' name to be of the form _<prefix>_<node_name> . You can include leading or trailing underscores but NMSDK will standardise the name for it to not matter. Collision Node A Collision node is used to specify a primitive object that will be used as a collition for the model. Collision Type : enum - Choice of Mesh , Box , Sphere or Cylinder The type of collision primitive to use. Scale Transform : enum - Choice of Transform or Dimensions Specifies whether the final transform of the collision object uses the objects' transform ( Transform ), or the actual size ( Dimensions ). This is useful if an object has has a scale transform applied to it, you can still retreive the shape of it by using the Dimensions option. Note: If you are using a Mesh collision type you MUST apply any scaling or rotational transforms for the mesh to be exported correctly. Light Node A Light node is used to create a light source in the scene. Intensity : float The intensity of the light. FOV : float The field of view of the light source. Values can range from 0 to 360 (degrees). Joint Node A Joint node is used for animations involving bones and meshes with weight bindings. Currently the ability to export scenes with these types of animations is not possible but it will hopefully come in the future, so stay tuned!","title":"Node type guide"},{"location":"exporting/node_docs/#node-properties","text":"Each node type has various properties that can be set. These are documented below.","title":"Node Properties"},{"location":"exporting/node_docs/#mesh-node","text":"The Mesh node is only type of node that is used for mesh data that you want to be exported into a geometry file. Requires Entity : bool Indicates whether or not the specified mesh object has an associated entity. Selecting this will add an entity panel (see the page on adding entities for more details.) Material : str The path to a material file if the mesh object does not have a custom material within blender. If you are using vanilla materials or a material you have already created/exported, then you can speed up the export process by simply setting this value to the path of the material file.","title":"Mesh Node"},{"location":"exporting/node_docs/#locator-node","text":"A Locator node is used to create something at a particular point in space. Whether it me a place to group objects, or a location at which an interaction will occur at. It is highly recommended that you use a Locator type node to handle interactions, instead of using entity files attached to a mesh node. This allows for more precise localisation of the interaction, as well as being able to safely and easily decouple the interaction location from any animated meshes. Not doing so can cause the camera to move wildly during an interaction. Requires Entity : bool Indicates whether or not the specified mesh object has an associated entity. Selecting this will add an entity panel (see the page on adding entities for more details.)","title":"Locator Node"},{"location":"exporting/node_docs/#reference-node","text":"A Reference node is used to indicate that another scene is included by reference in the parent scene. This may sometimes happen multiple times in a scene in a nested fashion. Reference Path : str The path to the scene that is referenced within the parent scene at the specified location. This value can be set to nest vanilla scenes or already exported scenes within you current scene without having to export them again. Scene Name : str For a scene that is to be exported separately, but kept in the original scene as a reference, this is the base name of the scene file. So for example if you want a scene to be exported with the file name TESTCUBE.SCENE.MBIN , you would specify this to be testcube . The case of the value doesn't matter as it is always changed to uppercase in the export process. Is a proc-gen scene? : bool Used to indicate whether or not the scene being exported requires a descriptor to be produced, causing it be procedurally generated. For more info on how this works see here .","title":"Reference Node"},{"location":"exporting/node_docs/#descriptor-node","text":"Proc type : enum - Choice of Always (Default) or Random Whether or not the specified object is to always be rendered (pending rendering state of its parent), or whether it should be randomly chosen from a group containing all other objects with the same prefix at the same level. Proc prefix : str The prefix used to group all objects that are to be randomly selected. For example, If you have 5 sibling all objects that you wish to be selected from, you would set this value to be the same for all of them. Note that NMSDK will construct the objects' name to be of the form _<prefix>_<node_name> . You can include leading or trailing underscores but NMSDK will standardise the name for it to not matter.","title":"Descriptor Node"},{"location":"exporting/node_docs/#collision-node","text":"A Collision node is used to specify a primitive object that will be used as a collition for the model. Collision Type : enum - Choice of Mesh , Box , Sphere or Cylinder The type of collision primitive to use. Scale Transform : enum - Choice of Transform or Dimensions Specifies whether the final transform of the collision object uses the objects' transform ( Transform ), or the actual size ( Dimensions ). This is useful if an object has has a scale transform applied to it, you can still retreive the shape of it by using the Dimensions option. Note: If you are using a Mesh collision type you MUST apply any scaling or rotational transforms for the mesh to be exported correctly.","title":"Collision Node"},{"location":"exporting/node_docs/#light-node","text":"A Light node is used to create a light source in the scene. Intensity : float The intensity of the light. FOV : float The field of view of the light source. Values can range from 0 to 360 (degrees).","title":"Light Node"},{"location":"exporting/node_docs/#joint-node","text":"A Joint node is used for animations involving bones and meshes with weight bindings. Currently the ability to export scenes with these types of animations is not possible but it will hopefully come in the future, so stay tuned!","title":"Joint Node"},{"location":"exporting/proc_gen/","text":"Creating a procedurally generate-able scene Creating procedurally generated scenes using NMSDK is simple. For every scene (Ie. Reference node which has no Reference Path property set), you can specify that a scene is proc-gen by setting the Is a proc-gen scene? property to True . Once this property has been set, a new panel will appear with descriptor settings For nodes that you wish to always appear, you can leave Proc type as Always and ignore the Proc prefix value If you wish for a node to be selected from a set, select the Proc type Random and specify the prefix in Proc prefix . All objects with the same Proc prefix value will form a pool from which objects are to be selected from. Note that if an object is not selected, none of its children will be either. In the above example, we have NMS_CONSTRUCTBIGGUNGUN and ref_mount with Proc type as Always , meaning they will always appear in the scene. The 5 NMS_LIGHTSPRITE instances all have Proc type as Random and Proc prefix as LIGHT , meaning in the final scene, only one of them will appear randomly. Their final node names in the produced scene will also be _LIGHT_LIGHTSPRITE . Tips and things to note: Only nodes with the same parent will create a well-formed proc-gen scene. If you have two nodes with the same Proc prefix and different parents, they are not part of the same selection pool You should avoid giving a child of an object the same Proc prefix as its parent. You might make blender implode (or crash, I don't know...) If you are particularly diligent you can add the Proc prefix to the name of the node in blender. As long as you have the same Proc prefix in the descriptor panel it will still work fine. Eg. Node name = _GRP_MOUNT , and Proc prefix = GRP will work fine and it will allow you to see what is grouped together without having to click on the object.","title":"Making a proc-gen scene"},{"location":"exporting/proc_gen/#creating-a-procedurally-generate-able-scene","text":"Creating procedurally generated scenes using NMSDK is simple. For every scene (Ie. Reference node which has no Reference Path property set), you can specify that a scene is proc-gen by setting the Is a proc-gen scene? property to True . Once this property has been set, a new panel will appear with descriptor settings For nodes that you wish to always appear, you can leave Proc type as Always and ignore the Proc prefix value If you wish for a node to be selected from a set, select the Proc type Random and specify the prefix in Proc prefix . All objects with the same Proc prefix value will form a pool from which objects are to be selected from. Note that if an object is not selected, none of its children will be either. In the above example, we have NMS_CONSTRUCTBIGGUNGUN and ref_mount with Proc type as Always , meaning they will always appear in the scene. The 5 NMS_LIGHTSPRITE instances all have Proc type as Random and Proc prefix as LIGHT , meaning in the final scene, only one of them will appear randomly. Their final node names in the produced scene will also be _LIGHT_LIGHTSPRITE .","title":"Creating a procedurally generate-able scene"},{"location":"exporting/proc_gen/#tips-and-things-to-note","text":"Only nodes with the same parent will create a well-formed proc-gen scene. If you have two nodes with the same Proc prefix and different parents, they are not part of the same selection pool You should avoid giving a child of an object the same Proc prefix as its parent. You might make blender implode (or crash, I don't know...) If you are particularly diligent you can add the Proc prefix to the name of the node in blender. As long as you have the same Proc prefix in the descriptor panel it will still work fine. Eg. Node name = _GRP_MOUNT , and Proc prefix = GRP will work fine and it will allow you to see what is grouped together without having to click on the object.","title":"Tips and things to note:"},{"location":"exporting/shader_nodes/","text":"Setting up the NMS UberShader node Make sure you have the blender renderer set up as the 'Cycles' renderer. The rest... Coming soon! For now... Just export models with the textures as usual...","title":"Shader Setup"},{"location":"exporting/shader_nodes/#setting-up-the-nms-ubershader-node","text":"Make sure you have the blender renderer set up as the 'Cycles' renderer. The rest... Coming soon! For now... Just export models with the textures as usual...","title":"Setting up the NMS UberShader node"},{"location":"importing/importing/","text":"Importing models into Blender NMSDK is capable of importing NMS SCENE files and loading the models. At the moment the functionality is still in beta and has many issues, primarily due to the custom shader setup used by NMS. Importing scenes from the game is simple. An option can be found in the Import drop-down menu found by selecting File > Import This will open up a file selection dialog which lets you select the scene you wish to import. Keep in mind that at the moment NMSDK will import all of the components of a scene including ones that are referenced by the scene. So for a large scene such as the freighter scene it may actually take a minute or two to load all the data. Import settings When importing scenes into blender, there are a number of options that can be changed to allow for flexibility when importing. These are as follows: Draw bounded hulls This setting is essentially for debugging purposes. There is never going to be a time in standard use that you will want to enable this. Clear scene This will remove any existing objects in the scene (except camera and light) then import the scene into the empty blender scene. If you are wanting to import multiple scenes into the one blender scene then you can disable this option. Import collisions If you are simply wanting to see what the model looks like, you can safely disable this option. This may be used for debugging existing models. This is enabled by default, however these collisions are not drawn (see next option...) Draw collisions If collisions are imported, specify whether they should be drawn intially. This is disabled by default and will probably be removed as an option soon as it has been superseded by the ability to toggle the collision visibility via the NMSDK properties panel . Import bones Whether or not to import the bones for models that have them. This is useful if you are importing models to animate yourself as they are already rigged. This functionality is still reasonably broken so do not expect good results if this is enabled. Load all animations Whether to load all the animations, irrespective of how many there are. This setting should only be enabled if you know that the number of animations is low. For the player model there are over 300 animations to load so it takes an extremely long time to load all of them. By default NMSDK will not load any animations if the scene contains more than 10 in total to ensure that scenes can be loaded faster. For more on loading animations after the scene has been loaded, see here .","title":"Importing"},{"location":"importing/importing/#importing-models-into-blender","text":"NMSDK is capable of importing NMS SCENE files and loading the models. At the moment the functionality is still in beta and has many issues, primarily due to the custom shader setup used by NMS. Importing scenes from the game is simple. An option can be found in the Import drop-down menu found by selecting File > Import This will open up a file selection dialog which lets you select the scene you wish to import. Keep in mind that at the moment NMSDK will import all of the components of a scene including ones that are referenced by the scene. So for a large scene such as the freighter scene it may actually take a minute or two to load all the data.","title":"Importing models into Blender"},{"location":"importing/importing/#import-settings","text":"When importing scenes into blender, there are a number of options that can be changed to allow for flexibility when importing. These are as follows:","title":"Import settings"},{"location":"importing/importing/#draw-bounded-hulls","text":"This setting is essentially for debugging purposes. There is never going to be a time in standard use that you will want to enable this.","title":"Draw bounded hulls"},{"location":"importing/importing/#clear-scene","text":"This will remove any existing objects in the scene (except camera and light) then import the scene into the empty blender scene. If you are wanting to import multiple scenes into the one blender scene then you can disable this option.","title":"Clear scene"},{"location":"importing/importing/#import-collisions","text":"If you are simply wanting to see what the model looks like, you can safely disable this option. This may be used for debugging existing models. This is enabled by default, however these collisions are not drawn (see next option...)","title":"Import collisions"},{"location":"importing/importing/#draw-collisions","text":"If collisions are imported, specify whether they should be drawn intially. This is disabled by default and will probably be removed as an option soon as it has been superseded by the ability to toggle the collision visibility via the NMSDK properties panel .","title":"Draw collisions"},{"location":"importing/importing/#import-bones","text":"Whether or not to import the bones for models that have them. This is useful if you are importing models to animate yourself as they are already rigged. This functionality is still reasonably broken so do not expect good results if this is enabled.","title":"Import bones"},{"location":"importing/importing/#load-all-animations","text":"Whether to load all the animations, irrespective of how many there are. This setting should only be enabled if you know that the number of animations is low. For the player model there are over 300 animations to load so it takes an extremely long time to load all of them. By default NMSDK will not load any animations if the scene contains more than 10 in total to ensure that scenes can be loaded faster. For more on loading animations after the scene has been loaded, see here .","title":"Load all animations"}]}